#jinja2: lstrip_blocks: "True", trim_blocks: "True"
{% if item[1].http_redirect|default(false) %}
<VirtualHost {{ item[1].addr|default("*") }}:80>
  ServerName {{ item[1].name }}
{% for alias in item[1].aliases|default([]) %}
  ServerAlias {{ alias }}
{% endfor %}
  ErrorLog /srv/www/log/{{ item[1].name }}/error_log
  CustomLog /srv/www/log/{{ item[1].name }}/access_log combined

  RewriteEngine On
  {% if item[1].canonicalize_hostname|default(false) %}
  RewriteRule ^ https://{{ item[1].name }}%{REQUEST_URI} [R=301,L]
  {% else %}
  RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
  {% endif %}
</VirtualHost>

{% endif %}
<VirtualHost {{ item[1].addr|default("*") }}:{{ item[1].port|default(443) }}>
  # General setup for the virtual host, inherited from global configuration
  ServerName {{ item[1].name }}
{% for alias in item[1].aliases|default([]) %}
  ServerAlias {{ alias }}
{% endfor %}
  DocumentRoot /srv/www/htdocs/{{ item[1].name }}

  # Use separate log files for the SSL virtual host; note that LogLevel
  # is not inherited from httpd.conf.
  ErrorLog /srv/www/log/{{ item[1].name }}/error_log
  CustomLog /srv/www/log/{{ item[1].name }}/access_log combined
  LogLevel warn

  #   SSL Engine Switch:
  #   Enable/Disable SSL for this virtual host.
  SSLEngine on

  #   SSL Protocol support:
  # List the enable protocol levels with which clients will be able to
  # connect.  Disable SSLv2 access by default:
  SSLProtocol all -SSLv2 -SSLv3

  #   SSL Cipher Suite:
  #   List the ciphers that the client is permitted to negotiate.
  #   See the mod_ssl documentation for a complete list.
  SSLCipherSuite {{ tls_intermediate_ciphersuites }}
  SSLHonorCipherOrder On

  #   Server Certificate:
  # Point SSLCertificateFile at a PEM encoded certificate.  If
  # the certificate is encrypted, then you will be prompted for a
  # pass phrase.  Note that a kill -HUP will prompt again.  A new
  # certificate can be generated using the genkey(1) command.
  SSLCertificateFile {{ item[1].cert|default("/".join((tls_certs, item[1].name))+".crt") }}

  #   Server Private Key:
  #   If the key is not combined with the certificate, use this
  #   directive to point at the key file.  Keep in mind that if
  #   you've both a RSA and a DSA private key you can configure
  #   both in parallel (to also allow the use of DSA ciphers, etc.)
  SSLCertificateKeyFile {{ item[1].key|default("/".join((tls_private, item[1].name))+".key") }}

  #   Server Certificate Chain:
  #   Point SSLCertificateChainFile at a file containing the
  #   concatenation of PEM encoded CA certificates which form the
  #   certificate chain for the server certificate. Alternatively
  #   the referenced file can be the same as SSLCertificateFile
  #   when the CA certificates are directly appended to the server
  #   certificate for convinience.
  SSLCertificateChainFile {{ item[1].cert|default("/".join((tls_certs, item[1].name))+".crt") }}

{% if item[1].sslproxy|default(false) %}
  #   SSL/TLS Protocol Engine for proxy:
  SSLProxyEngine on
  SSLProxyCACertificateFile {{ item[1].sslproxy_cacert|default(apache_sslproxy_cacert) }}
  SSLProxyMachineCertificateFile {{ item[1].sslproxy_cert|default(apache_sslproxy_cert) }}
  SSLProxyVerify require
  SSLProxyVerifyDepth {{ item[1].sslproxy_verifydepth|default(apache_sslproxy_verifydepth) }}

{% endif %}
  #   SSL Engine Options:
  #   Set various options for the SSL engine.
  #   o StdEnvVars:
  #     This exports the standard SSL/TLS related `SSL_*' environment variables.
  #     Per default this exportation is switched off for performance reasons,
  #     because the extraction step is an expensive operation and is usually
  #     useless for serving static content. So one usually enables the
  #     exportation for CGI and SSI requests only.
  <Files ~ "\.(cgi|shtml|phtml|php3?)$">
    SSLOptions +StdEnvVars
  </Files>
  <Directory "/var/www/cgi-bin">
    SSLOptions +StdEnvVars
  </Directory>

  Header always set Strict-Transport-Security "max-age=15768000"

{% if item[1].canonicalize_hostname|default(false) %}
  RewriteEngine On
  RewriteCond %{HTTP_HOST} !={{ item[1].name }} [NC]
  RewriteRule ^ https://{{ item[1].name }}%{REQUEST_URI} [R=301,L]

{% endif %}
  IncludeOptional conf.sites.d/{{ '%02d'|format(item[0]) }}-{{ item[1].name }}.conf.d/*.conf
</VirtualHost>
